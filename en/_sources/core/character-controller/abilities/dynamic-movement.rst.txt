.. _dynamic-movement-page:

Dynamic Movement
================

This component is used to perform movement on a ``GameObject`` through its ``RigidBody2D`` component.

The ``RigidBody2D`` shall be set as Dynamic.

What it Requires
----------------

There must be a ``RigidBody2D`` component among its ``GameObject`` other components.

Usage
-----

Here is how you can use this component:

Direct approach:
****************

.. code-block:: csharp

    DynamicMovement movement;

    void Awake() 
    {
        movement = GetComponent<DynamicMovement>();
    }

    void FixedUpdate()
    {
        float directionSign = MyWayOfDetectingDirectionSign();
        movement.Move(directionSign); // directionSign < 0 left, directionSign > 0 right
    }

Setup
*****

.. code-block:: csharp

   namespace Handy2DTools.CharacterController.Abilities
    {
        [CreateAssetMenu(fileName = "New DynamicMovementSetup", menuName = "Handy 2D Tools/CharacterController/Setups/DynamicMovement")]
        public class DynamicMovementSetup : AbilitySetup
        {
            #region Editor

            [SerializeField]
            protected float xSpeed = 10f;

            [SerializeField]
            protected bool hasStartingtImpulse = false;

            [SerializeField]
            [ShowIf("hasStartingtImpulse")]
            [InfoBox("As of this version, this is not apllyed while on slopes. This is due to dynamic rigidbody physics. REAAAAAAAAAAAALY difficult to control slopes with dynamic rgbd.", EInfoBoxType.Warning)]
            [Tooltip("Higher this value is, sooner the character will reach the max speed coming from 0 velocity.")]
            protected float accelerationRate = 50f;

            [SerializeField]
            [ShowIf("hasStartingtImpulse")]
            [Tooltip("Higher this value is, sooner character will reach 0 velocity when starting impulse stops. This is only applyed WHILE the character is inside the starting impulse.")]
            protected float startingImpulseDrag = 10f;

            [Header("Materials"), Space]
            [Tooltip("A PhysicsMaterial2D with friction = 100000 (maximum friction) for dealing with standing on slopes.")]
            [SerializeField]
            [Required]
            protected PhysicsMaterial2D fullFriction;

            #endregion

            #region Getters

            public float XSpeed => xSpeed;
            public bool HasStartingtImpulse => hasStartingtImpulse;
            public float AccelerationRate => accelerationRate;
            public float StartingImpulseDrag => startingImpulseDrag;
            public PhysicsMaterial2D FullFriction => fullFriction;

            #endregion
        }
    }

Up to this version, the dynamic movement is the only Ability wich does not require to be set as ``Active`` on its setup to perform. 

Available Methods
-----------------

.. code-block:: csharp
    
    // Call this to make the character stand still.
    public virtual void Stand();

    // Makes the character stand considering being or not on a slope
    public virtual void Stand(SlopeData SlopeData) 

    // Call this to make character move horizontally using its 
    // speed set on inspector. Just inform for wich direction (-1 left and 1 right)
    // it should move towards.
    public virtual void MoveHorizontally(float directionSign)

    // Move horizontally considering being grounded
    public virtual void GroundedMoveHorizontally(float directionSign)

    // Move horizontally considering being grounded and evaluating slopes
    public virtual void GroundedMoveHorizontally(float directionSign, SlopeData slopeData, bool ignoreSlopes = false)

    // Move horizontally and changes gravity scale of RigidBody2D
    public virtual void MoveHorizontallyApplyingGravity(float directionSign, float gravityScale)

    // Applies horizontal force into the given direction (-1 left and 1 right)
    public virtual void PushHorizontally(float force, float directionSign)

    // Aplly vertical speed
    public virtual void MoveVertically(float speed)